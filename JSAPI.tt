<#@ template debug="true" language="C#" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Runtime.InteropServices;

namespace Spidermonkey {
    public static partial class JSAPI {
        /// <summary>
        /// Initialize SpiderMonkey, returning true only if initialization succeeded.  Once this method has succeeded, it is safe to call JS_NewRuntime and other JSAPI methods.
        /// This method must be called before any other JSAPI method is used on any thread.  Once it has been used, it is safe to call any JSAPI method, and it remains safe to do so until JS_ShutDown is correctly called.
        /// It is currently not possible to initialize SpiderMonkey multiple times (that is, calling JS_Init, JSAPI methods, then JS_ShutDown in that order, then doing so again).  This restriction may eventually be lifted.
        /// In the past JS_Init once had the signature JSRuntime * JS_Init(uint32_t maxbytes) and was used to create new JSRuntime instances.  This meaning has been removed; use JS_NewRuntime instead.
        /// </summary>
        <# ImportFunction("?JS_Init@@YA_NXZ"); #>
        private static extern bool Init ();

        /// <summary>
        /// JS_NewRuntime initializes the JavaScript runtime environment. Call JS_NewRuntime before making any other API calls. JS_NewRuntime allocates memory for the JSRuntime and initializes certain internal runtime structures. maxbytes specifies the number of allocated bytes after which garbage collection is run.
        /// Generally speaking, most applications need only one JSRuntime. In a JS_THREADSAFE build, each runtime is capable of handling multiple execution threads, using one JSContext per thread, sharing the same JSRuntime. You only need multiple runtimes if your application requires completely separate JS engines that cannot share values, objects, and functions.
        /// On success, JS_NewRuntime returns a pointer to the newly created runtime, which the caller must later destroy using JS_DestroyRuntime. Otherwise it returns NULL.
        /// </summary>
        <# ImportFunction("?JS_NewRuntime@@YAPAUJSRuntime@@IIPAU1@@Z"); #>
        public static extern JSRuntimePtr NewRuntime (
            UInt32 maxBytes,
            UInt32 maxNurseryBytes = DefaultNurseryBytes,
            JSRuntimePtr parentRuntime = default(JSRuntimePtr)
        );

        /// <summary>
        /// JS_NewContext creates a new JSContext in the runtime rt. On success, it returns a pointer to the new context. Otherwise it returns NULL. For more details about contexts, see JSContext. For sample code that creates and initializes a JSContext, see JSAPI User Guide: JSAPI basics.
        /// The stackchunksize parameter does not control the JavaScript stack size. (The JSAPI does not provide a way to adjust the stack depth limit.) Passing a large number for stackchunksize is a mistake. In a DEBUG build, large chunk sizes can degrade performance dramatically. The usual value of 8192 is recommended.
        /// The application must call JS_DestroyContext when it is done using the context. Before a JSRuntime may be destroyed, all the JSContexts associated with it must be destroyed.
        /// The new JSContext initially has no global object.
        /// In a JS_THREADSAFE build, the new JSContext is initially associated with the calling thread. As long as it stays associated with that thread, no other thread may use it or destroy it. A JSContext may be transferred from one thread to another using JS_ClearContextThread and JS_SetContextThread. 
        /// </summary>
        <# ImportFunction("?JS_NewContext@@YAPAUJSContext@@PAUJSRuntime@@I@Z"); #>
        public static extern JSContextPtr NewContext(JSRuntimePtr rt, UInt32 stackchunksize);

        /// <summary>
        /// JS_SetErrorReporter enables you to define and use your own error reporting mechanism in your applications. The reporter you define is automatically passed a JSErrorReport structure when an error occurs and has been parsed by JS_ReportError. JS_SetErrorReporter returns the previous error reporting function of the context, or NULL if no such function had been set.
        /// Typically, the error reporting mechanism you define should log the error where appropriate (such as to a log file), and display an error to the user of your application. The error you log and display can make use of the information passed about the error condition in the JSErrorReport structure.
        /// The error reporter callback must not reenter the JSAPI. Like all other SpiderMonkey callbacks, the error reporter callback must not throw a C++ exception.
        /// </summary>
        <# ImportFunction("?JS_SetErrorReporter@@YAP6AXPAUJSContext@@PBDPAUJSErrorReport@@@ZPAUJSRuntime@@P6AX012@Z@Z"); #>
        public static extern JSErrorReporter SetErrorReporter(JSContextPtr cx, JSErrorReporter er);

        /// <summary>
        /// JS_NewGlobalObject creates a new global object based on the specified class.
        /// The new object has no parent. It initially has no prototype either, since it is typically the first object created; call JS_InitStandardClasses to create all the standard objects, including Object.prototype, and set the global object's prototype.
        /// The constructor clasp->construct is not called.
        /// On success, JS_NewGlobalObject returns a pointer to the new object. Otherwise it returns NULL.
        /// </summary>
        <# ImportFunction("?JS_NewGlobalObject@@YAPAVJSObject@@PAUJSContext@@PBUJSClass@@PAUJSPrincipals@@W4OnNewGlobalHookOption@JS@@ABVCompartmentOptions@6@@Z"); #>
        public static extern JSObjectPtr NewGlobalObject(
            JSContextPtr cx, 
            JSClassPtr clasp,
            JSPrincipals principals,
            JSOnNewGlobalHookOption hookOption,
            ref JSCompartmentOptions options
        );

        <# ImportFunction("?JS_InitStandardClasses@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@@Z"); #>
        public static extern bool InitStandardClasses(
            JSContextPtr cx, JSHandleObject obj
        );

        <# ImportFunction("?AddObjectRoot@JS@@YA_NPAUJSContext@@PAV?$Heap@PAVJSObject@@@1@@Z"); #>
        public static extern bool AddObjectRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?AddValueRoot@JS@@YA_NPAUJSContext@@PAV?$Heap@VValue@JS@@@1@@Z"); #>
        public static extern bool AddValueRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?AddStringRoot@JS@@YA_NPAUJSContext@@PAV?$Heap@PAVJSString@@@1@@Z"); #>
        public static extern bool AddStringRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?RemoveObjectRoot@JS@@YAXPAUJSContext@@PAV?$Heap@PAVJSObject@@@1@@Z"); #>
        public static extern void RemoveObjectRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?RemoveValueRoot@JS@@YAXPAUJSContext@@PAV?$Heap@VValue@JS@@@1@@Z"); #>
        public static extern void RemoveValueRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?RemoveStringRoot@JS@@YAXPAUJSContext@@PAV?$Heap@PAVJSString@@@1@@Z"); #>
        public static extern void RemoveStringRoot(
            JSContextPtr cx, JSRootPtr opp
        );

        <# ImportFunction("?JS_DefaultValue@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@W4JSType@@V?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool 
        DefaultValue(
            JSContextPtr cx, JSHandleObject obj, JSType hint,
                        JSMutableHandleValue vp
        );

        <# ImportFunction("?JS_PropertyStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$Handle@Ujsid@@@3@V?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool 
        PropertyStub(JSContextPtr cx, JSHandleObject obj, JSHandleId id,
                        JSMutableHandleValue vp);

        <# ImportFunction("?JS_StrictPropertyStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$Handle@Ujsid@@@3@_NV?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool 
        StrictPropertyStub(JSContextPtr cx, JSHandleObject obj, JSHandleId id, bool strict,
                              JSMutableHandleValue vp);

        <# ImportFunction("?JS_DeletePropertyStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$Handle@Ujsid@@@3@PA_N@Z"); #>
        public static extern bool 
        DeletePropertyStub(JSContextPtr cx, JSHandleObject obj, JSHandleId id,
                              ref bool succeeded);

        <# ImportFunction("?JS_EnumerateStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@@Z"); #>
        public static extern bool 
        EnumerateStub(JSContextPtr cx, JSHandleObject obj);

        <# ImportFunction("?JS_ResolveStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$Handle@Ujsid@@@3@@Z"); #>
        public static extern bool 
        ResolveStub(JSContextPtr cx, JSHandleObject obj, JSHandleId id);

        <# ImportFunction("?JS_ConvertStub@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@W4JSType@@V?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool 
        ConvertStub(JSContextPtr cx, JSHandleObject obj, JSType type,
                       JSMutableHandleValue vp);

        <# ImportFunction("?JS_EnterCompartment@@YAPAUJSCompartment@@PAUJSContext@@PAVJSObject@@@Z"); #>
        public static extern JSCompartmentPtr
        EnterCompartment(JSContextPtr cx, JSObjectPtr target);

        <# ImportFunction("?JS_LeaveCompartment@@YAXPAUJSContext@@PAUJSCompartment@@@Z"); #>
        public static extern void
        LeaveCompartment(JSContextPtr cx, JSCompartmentPtr oldCompartment);

        <# ImportFunction("?JS_BeginRequest@@YAXPAUJSContext@@@Z"); #>
        public static extern void BeginRequest(JSContextPtr cx);

        <# ImportFunction("?JS_EndRequest@@YAXPAUJSContext@@@Z"); #>
        public static extern void EndRequest(JSContextPtr cx);

        <# ImportFunction("?JS_GlobalObjectTraceHook@@YAXPAVJSTracer@@PAVJSObject@@@Z"); #>
        public static extern void GlobalObjectTraceHook(IntPtr tracer, JSObjectPtr obj);

        // FIXME: This might be the wrong entry point
        <# ImportFunction("?JS_EvaluateUCScript@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@PB_WIPBDIV?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool EvaluateUCScript(
            JSContextPtr cx, 
            JSHandleObject scope,
            // char16_t * chars
            // uint length
            IntPtr chars, int length,
            // char * filename
            IntPtr filename, uint lineno,
            JSMutableHandleValue rval
        );

        <# ImportFunction("?ToStringSlow@js@@YAPAVJSString@@PAUJSContext@@V?$Handle@VValue@JS@@@JS@@@Z"); #>
        public static extern JSStringPtr ToString(
            JSContextPtr cx, JSHandleValue v
        );

        <# ImportFunction("?JS_GetStringLength@@YAIPAVJSString@@@Z"); #>
        public static extern uint GetStringLength(
            JSStringPtr s
        );

        <# ImportFunction("?JS_CopyStringChars@@YA_NPAUJSContext@@V?$Range@_W@mozilla@@PAVJSString@@@Z"); #>
        public static extern bool CopyStringChars(
            JSContextPtr cx, 
            mozilla.Range dest,
            JSStringPtr str
        );

        <# ImportFunction("?JS_IsExceptionPending@@YA_NPAUJSContext@@@Z"); #>
        public static extern bool IsExceptionPending(
            JSContextPtr cx
        );

        <# ImportFunction("?JS_GetPendingException@@YA_NPAUJSContext@@V?$MutableHandle@VValue@JS@@@JS@@@Z"); #>
        public static extern bool GetPendingException(
            JSContextPtr cx,
            JSMutableHandleValue vp
        );

        <# ImportFunction("?JS_ClearPendingException@@YAXPAUJSContext@@@Z"); #>
        public static extern void ClearPendingException(
            JSContextPtr cx
        );

        <# ImportFunction("?JS_SetPendingException@@YAXPAUJSContext@@V?$Handle@VValue@JS@@@JS@@@Z"); #>
        public static extern void SetPendingException(
            JSContextPtr cx,
            JSHandleValue vp
        );

        <# ImportFunction("?ContextOptionsRef@JS@@YAAAVContextOptions@1@PAUJSContext@@@Z"); #>
        public static extern unsafe JSContextOptions * ContextOptionsRef(
            JSContextPtr cx
        );

        <# ImportFunction("?JS_GetUCProperty@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@PB_WIV?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool GetUCProperty(
            JSContextPtr cx,
            JSHandleObject obj,
            IntPtr name, uint namelen,
            JSMutableHandleValue vp
        );

        <# ImportFunction("?JS_SetUCProperty@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@PB_WIV?$Handle@VValue@JS@@@3@@Z"); #>
        public static extern bool SetUCProperty(
            JSContextPtr cx,
            JSHandleObject obj,
            IntPtr name, uint namelen,
            JSHandleValue vp
        );

        <# ImportFunction("?JS_TypeOfValue@@YA?AW4JSType@@PAUJSContext@@V?$Handle@VValue@JS@@@JS@@@Z"); #>
        public static extern JSType TypeOfValue(
            JSContextPtr cx,
            JSHandleValue vp
        );
        
        <# ImportFunction("?JS_CallFunctionValue@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$Handle@VValue@JS@@@3@ABVHandleValueArray@3@V?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool CallFunctionValue(
            JSContextPtr cx, 
            JSHandleObject obj, 
            JSHandleValue fval,
            ref JS.ValueArrayPtr args,
            JSMutableHandleValue rval
        );

        <# ImportFunction("?JS_DefineUCFunction@@YAPAVJSFunction@@PAUJSContext@@V?$Handle@PAVJSObject@@@JS@@PB_WIP6A_N0IPAVValue@4@@ZII@Z"); #>
        public static extern JSFunctionPtr DefineUCFunction(
            JSContextPtr cx,
            JSHandleObject obj,
            IntPtr name, uint namelen,
            JSNative call,
            uint nargs, uint attrs
        );       

        <# ImportFunction("?JS_DestroyContextNoGC@@YAXPAUJSContext@@@Z"); #>
        public static extern void DestroyContextNoGC(
            JSContextPtr context
        );

        <# ImportFunction("?JS_DestroyContext@@YAXPAUJSContext@@@Z"); #>
        public static extern void DestroyContext(
            JSContextPtr context
        );

        <# ImportFunction("?JS_DestroyRuntime@@YAXPAUJSRuntime@@@Z"); #>
        public static extern void DestroyRuntime(
            JSRuntimePtr runtime
        );

        <# ImportFunction("?JS_NewObject@@YAPAVJSObject@@PAUJSContext@@PBUJSClass@@V?$Handle@PAVJSObject@@@JS@@2@Z"); #>
        public static extern JSObjectPtr NewObject(
            JSContextPtr cx, 
            JSClassPtr clasp, 
            JSHandleObject proto, 
            JSHandleObject parent
        );

        <# ImportFunction("?JS_NewObjectWithGivenProto@@YAPAVJSObject@@PAUJSContext@@PBUJSClass@@V?$Handle@PAVJSObject@@@JS@@2@Z"); #>
        public static extern JSObjectPtr NewObjectWithGivenProto(
            JSContextPtr cx, 
            JSClassPtr clasp, 
            JSHandleObject proto, 
            JSHandleObject parent
        );

        <# ImportFunction("?JS_NewObjectForConstructor@@YAPAVJSObject@@PAUJSContext@@PBUJSClass@@ABVCallArgs@JS@@@Z"); #>
        public static extern JSObjectPtr NewObjectForConstructor(
            JSContextPtr cx, 
            JSClassPtr clasp, 
            ref JSCallArgs args
        );

        <# ImportFunction("?JS_IsArrayObject@@YA_NPAUJSContext@@V?$Handle@VValue@JS@@@JS@@@Z"); #>
        public static extern bool IsArrayObject(
            JSContextPtr context, JSHandleValue val
        );

        <# ImportFunction("?JS_IsArrayObject@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@@Z"); #>
        public static extern bool IsArrayObject(
            JSContextPtr context, JSHandleObject obj
        );

        <# ImportFunction("?JS_GetArrayLength@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@PAI@Z"); #>
        public static extern bool GetArrayLength(
            JSContextPtr context, JSHandleObject obj, out UInt32 length
        );

        <# ImportFunction("?JS_SetArrayLength@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@I@Z"); #>
        public static extern bool SetArrayLength(
            JSContextPtr context, JSHandleObject obj, UInt32 length
        );

        <# ImportFunction("?JS_NewArrayObject@@YAPAVJSObject@@PAUJSContext@@ABVHandleValueArray@JS@@@Z"); #>
        public static extern JSObjectPtr NewArrayObject(
            JSContextPtr context, 
            ref JS.ValueArrayPtr contents
        );

        <# ImportFunction("?JS_NewArrayObject@@YAPAVJSObject@@PAUJSContext@@I@Z"); #>
        public static extern JSObjectPtr NewArrayObject(
            JSContextPtr context, UInt32 length
        );

        <# ImportFunction("?JS_GetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@IV?$MutableHandle@VValue@JS@@@3@@Z"); #>
        public static extern bool GetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            JSMutableHandleValue vp
        );

        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@IV?$Handle@VValue@JS@@@3@@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            JSHandleValue v
        );

        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@I1@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            JSHandleObject v
        );

        // HACK: Ambiguity between HandleObject and HandleString w/JSString...
        /*
        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@IV?$Handle@PAVJSString@@@3@@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            JSHandleString v
        );
        */

        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@IH@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            Int32 v
        );

        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@II@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            UInt32 v
        );

        <# ImportFunction("?JS_SetElement@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@IN@Z"); #>
        public static extern bool SetElement(
            JSContextPtr cx,
            JSHandleObject objArg,
            UInt32 index,
            Double v
        );

        <# ImportFunction("?JS_NewUCStringCopyN@@YAPAVJSString@@PAUJSContext@@PB_WI@Z"); #>
        public static extern JSStringPtr NewUCStringCopyN(
            JSContextPtr cx, IntPtr s, UInt32 n 
        );

        <# ImportFunction("?JS_NewExternalString@@YAPAVJSString@@PAUJSContext@@PB_WIPBUJSStringFinalizer@@@Z"); #>
        public static extern void NewExternalString(
            JSContextPtr cx, IntPtr chars, UInt32 length, 
            /* JSStringFinalizer * */
            IntPtr finalizer
        );

        <# ImportFunction("?JS_StringHasLatin1Chars@@YA_NPAVJSString@@@Z"); #>
        public static extern bool StringHasLatin1Chars(
            JSStringPtr str
        );

        <# ImportFunction("?JS_GetLatin1StringCharsAndLength@@YAPBEPAUJSContext@@ABVAutoCheckCannotGC@JS@@PAVJSString@@PAI@Z"); #>
        public static extern IntPtr GetLatin1StringCharsAndLength(
            JSContextPtr cx,
            ref JS.AutoCheckCannotGC nogc, 
            JSStringPtr str,
            out UInt32 length
        );

        <# ImportFunction("?JS_GetTwoByteStringCharsAndLength@@YAPB_WPAUJSContext@@ABVAutoCheckCannotGC@JS@@PAVJSString@@PAI@Z"); #>
        public static extern IntPtr GetTwoByteStringCharsAndLength(
            JSContextPtr cx,
            ref JS.AutoCheckCannotGC nogc, 
            JSStringPtr str,
            out UInt32 length
        );

        <# ImportFunction("?JS_InitClass@@YAPAVJSObject@@PAUJSContext@@V?$Handle@PAVJSObject@@@JS@@1PBUJSClass@@P6A_N0IPAVValue@4@@ZIPBUJSPropertySpec@@PBUJSFunctionSpec@@56@Z"); #>
        public static extern JSObjectPtr InitClass(
            JSContextPtr cx, JSHandleObject obj, JSHandleObject parent_proto,
            JSClassPtr clasp, JSNative constructor, UInt32 nargs,
            JSPropertySpecPtr ps,        JSFunctionSpecPtr fs,
            JSPropertySpecPtr static_ps, JSFunctionSpecPtr static_fs
        );

        <# ImportFunction("?JS_New@@YAPAVJSObject@@PAUJSContext@@V?$Handle@PAVJSObject@@@JS@@ABVHandleValueArray@4@@Z"); #>
        public static extern JSObjectPtr New(
            JSContextPtr cx, JSHandleObject ctor,
            ref JS.ValueArrayPtr args
        );

        <# ImportFunction("?JS_GetPrototype@@YA_NPAUJSContext@@V?$Handle@PAVJSObject@@@JS@@V?$MutableHandle@PAVJSObject@@@3@@Z"); #>
        public static extern bool GetPrototype(
            JSContextPtr cx, JSHandleObject obj,
            JSMutableHandleObject protop
        );

        /*
        <# ImportFunction(""); #>
        public static extern void X(
        );
        */

        // TODO: Expose teardown/free APIs

    }
}
<#+
    public void ImportFunction (string name) {
        #>
        [DllImport(
            "mozjs.dll",
            BestFitMapping = false,
            CallingConvention = CallingConvention.Cdecl,
            EntryPoint = "<#= name #>",
            ExactSpelling = true,
            PreserveSig = true,
            SetLastError = false,
            ThrowOnUnmappableChar = true
        )]
        <#+
    }
#>