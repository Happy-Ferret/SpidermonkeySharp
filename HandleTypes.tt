<#@ template debug="true" language="C#" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Spidermonkey {
    <# DefinePointerType("JSObjectPtr", "IRootable"); #>
    <# DefinePointerType("JSStringPtr", "IRootable"); #>
    <# DefinePointerType("JSScriptPtr", "IRootable"); #>
    <# DefinePointerType("JSRuntimePtr"); #>
    <# DefinePointerType("JSContextPtr"); #>
    <# DefinePointerType("JSCompartmentPtr"); #>
    <# DefinePointerType("JSRootPtr"); #>
    <# DefinePointerType("JSClassPtr"); #>
    <# DefinePointerType("JSFunctionPtr"); #>
    <# DefinePointerType("JSFunctionSpecPtr"); #>
    <# DefinePointerType("JSPropertySpecPtr"); #>

    <# DefineHandleType("JSHandleObject", "JSObjectPtr", rootable: true); #>
    <# DefineHandleType("JSHandleScript", "JSScriptPtr", rootable: true); #>
    <# DefineHandleType("JSHandleString", "JSStringPtr", rootable: true); #>
    <# DefineHandleType("JSHandleValue", "JS.Value", rootable: true); #>
    <# DefineHandleType("JSHandleId", "jsid", rootable: false); #>

    <# DefineHandleType("JSMutableHandleObject", "JSObjectPtr", rootable: true); #>
    <# DefineHandleType("JSMutableHandleScript", "JSScriptPtr", rootable: true); #>
    <# DefineHandleType("JSMutableHandleString", "JSStringPtr", rootable: true); #>
    <# DefineHandleType("JSMutableHandleValue", "JS.Value", rootable: true); #>
}

<#+
    public void DefinePointerType (string name, params string[] interfaces) {
        #>
        [StructLayout(LayoutKind.Sequential)]
        public partial struct <#= name #> 
        <#+
            if (interfaces.Length > 0) {
                #> : <#= String.Join(", ", interfaces) #> <#+
            }
        #> {
            public class TComparer : IComparer< <#= name #> >, IEqualityComparer< <#= name #> > {
                public int Compare (<#= name #> lhs, <#= name #> rhs) {
                    return lhs.Pointer.ToInt64().CompareTo(rhs.Pointer.ToInt64());
                }

                public int GetHashCode (<#= name #> ptr) {
                    return ptr.Pointer.GetHashCode();
                }

                public bool Equals (<#= name #> lhs, <#= name #> rhs) {
                    return lhs.Pointer == rhs.Pointer;
                }
            }

            public static readonly TComparer Comparer = new TComparer();
            public static readonly <#= name #> Zero = new <#= name #>(IntPtr.Zero);

            public IntPtr Pointer;

            public <#= name #> (IntPtr pointer) {
                Pointer = pointer;
            }

            public static implicit operator IntPtr (<#= name #> self) {
                return self.Pointer;
            }

            public static explicit operator <#= name #> (IntPtr ptr) {
                return new <#= name #> {
                    Pointer = ptr
                };
            }

            public bool IsZero {
                get {
                    return (Pointer == IntPtr.Zero);
                }
            }

            public bool IsNonzero {
                get {
                    return (Pointer != IntPtr.Zero);
                }
            }

            public bool Equals (<#= name #> rhs) {
                return (Pointer == rhs.Pointer);
            }

            public override bool Equals (object obj) {
                if (obj is <#= name #>)
                    return Equals((<#= name #>)obj);
                else
                    return base.Equals(obj);
            }

            public override int GetHashCode () {
                return Pointer.GetHashCode();
            }

            public override string ToString () {
                return String.Format("<{0} 0x{1:X8}>", "<#= name #>", Pointer.ToInt64());
            }
        }
        <#+
    }

    public void DefineHandleType (string name, string valueName, bool rootable = false) {
        #>
        [StructLayout(LayoutKind.Sequential)]
        public partial struct <#= name #> {
            public IntPtr AddressOfTarget;

            public <#= name #> (IntPtr addressOfTarget) {
                if (addressOfTarget == IntPtr.Zero)
                    throw new ArgumentNullException("addressOfTarget");

                AddressOfTarget = addressOfTarget;
            }

            public unsafe <#= name #> (<#= valueName #> * addressOfTarget)
                : this((IntPtr)addressOfTarget) {
            }

            public unsafe <#= valueName #> Get () {
                <#= valueName #> * pTarget = (<#= valueName #> *)AddressOfTarget;
                return *pTarget;
            }
            
            public static unsafe implicit operator <#= name #> (<#= valueName #> * addressOfTarget) {
                return new <#= name #>(addressOfTarget);
            }
        <#+
        if (rootable) {
            #>
            public static implicit operator <#= name #> (Rooted< <#= valueName #> > root) {
                return new <#= name #>(root.Root.Pointer);
            }
            <#+
        }
        #>
            }
        <#+
    }
#>